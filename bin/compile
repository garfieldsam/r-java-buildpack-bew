# fail fast
set -e

# debug
# set -x

shopt -s extglob

function error() {
  echo " !     $*" >&2
  exit 1
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

function read_var() {
  echo $(head -n 1 $1)
}

function jdk_download() {
  location="$1"

  mkdir -p $location
  wget --no-cookies --no-check-certificate --header "Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie" "http://download.oracle.com/otn-pub/java/jdk/7u4-b20/jdk-7u4-linux-x64.tar.gz"
  mv jdk-7u4-linux-x64.tar.gz $location
#  tar -xzf "$location/jdk-7u4-linux-x64.tar.gz"
#  tar -xzf "$location/jdk-7u4-linux-x64.tar.gz"
   cd $location
   tar -xzf "jdk-7u4-linux-x64.tar.gz"
}

# clean up leaking environment
unset GIT_DIR

# parse and derive params
BUILD_DIR=$1
CACHE_DIR="$2/vendor"
LP_DIR=`cd $(dirname $0); cd ..; pwd`
BUILDPACK_DIR="$(dirname $(dirname $0))"

# fix STACK variable if unset
if [ -z "${STACK}" ];
then
  STACK="cedar-14"
fi


# config

# read in R version if file exists
if [[ -f $BUILD_DIR/.r-version ]]; then
  R_VERSION=`read_var $BUILD_DIR/.r-version`
else
  R_VERSION="3.2.2"
fi

# read in buildback binary version if file exists
if [[ -f $BUILD_DIR/.r-buildpack-version ]]; then
  BUILD_PACK_VERSION=`read_var $BUILD_DIR/.r-buildpack-version`
else
  BUILD_PACK_VERSION="20150301-1046"
fi

S3_BUCKET="heroku-buildpack-r"
R_BINARIES="http://${S3_BUCKET}.s3.amazonaws.com/R-${R_VERSION}-binaries-${BUILD_PACK_VERSION}.tar.gz"

VENDOR_DIR="$BUILD_DIR/vendor"
R_BASE="$VENDOR_DIR/R"

CRAN_MIRROR="http://cran.revolutionanalytics.com"


#mkdir /app/vendor
mkdir -p $CACHE_DIR
#mkdir -p $VENDOR_DIR
#mkdir =p $VENDOR_DIR_TWO

REPOSITORY_ROOT="download.pivotal.io.s3.amazonaws.com"
JDK_VERSION="1.7.0_04"
#JDK="openjdk-${JDK_VERSION}"
JDK="jdk${JDK_VERSION}"
PLATFORM="lucid"
ARCH="x86_64"
#JDK_URL="http://${REPOSITORY_ROOT}/openjdk/${PLATFORM}/${ARCH}/${JDK}.tar.gz"
#JDK_URL="http://s3.amazonaws.com/bouncy/download/crypto-141.tar.gz"
#JDK_URL="https://edelivery.oracle.com/otn-pub/java/jdk/8u20-b26/jdk-8u60-linux-x64.tar.gz"
#echo "JDK_URL: $JDK_URL" | indent
JAVA_HOME_TEMP="$VENDOR_DIR/$JDK"
#: ${JAVA_HOME=}
#: ${JAVA_CPPFLAGS=~autodetect~}
#: ${JAVA_LD_LIBRARY_PATH=~autodetect~}
#: ${JAVA_LIBS=~autodetect~}

echo "Downloading and unpacking $JDK into '$VENDOR_DIR'" | indent
jdk_download "${VENDOR_DIR}"
#curl -L -O -H "Cookie: oraclelicense=accept-securebackup-cookie" -k "https://edelivery.oracle.com/otn-pub/java/jdk/8u20-b26/jdk-8u60-linux-x64.tar.gz"
#wget --no-cookies --no-check-certificate --header "Cookie: gpw_e24=http%3A%2F%2Fwww.oracle.com%2F; oraclelicense=accept-securebackup-cookie" "http://download.oracle.com/otn-pub/java/jdk/7u4-b20/jdk-7u4-linux-x64.tar.gz"
#mv jdk-8u60-linux-x64.tar.gz "${VENDOR_DIR_TWO}"
#mkdir "${VENDOR_DIR_TWO}/jdk-7u4-linux-x64"
#mv  jdk-7u4-linux-x64.tar.gz "/app/vendor"
#sleep 10s
#tar -zxf "${VENDOR_DIR}/jdk-7u4-linux-x64.tar.gz"
#wget "${JDK_URL}" --no-check-certificate
#mkdir -p $JAVA_HOME_TEMP
#mv jdk-7u51-linux-x64.tar.gz "${JAVA_HOME_TEMP}"
#tar xzf "${JAVA_HOME_TEMP}/jdk-7u51-linux-x64.tar.gz"
#rm "${JAVA_HOME_TEMP}/jdk-7u51-linux-x64.tar.gz"

echo "JAVA_HOME_TEMP: $JAVA_HOME_TEMP" | indent
#export JAVA_HOME="/app/vendor/${JDK}"
export JAVA_HOME=$JAVA_HOME_TEMP
echo "JAVA_HOME: $JAVA_HOME" | indent
export JAVA_CPPFLAGS="-I$JAVA_HOME/include -I$JAVA_HOME/include/linux"
echo "JAVA_CPPFLAGS: $JAVA_CPPFLAGS" | indent

#mkdir -p $JAVA_HOME
#echo "Copying vendored ${JAVA_HOME_TEMP} files into ${JAVA_HOME}" | indent
#cp -R $JAVA_HOME_TEMP/* $JAVA_HOME

#if [ -f "/usr/bin/java" ]; then
#     echo "Java found on path" | indent
#else
    #ln -fs $JAVA_HOME/bin/java /usr/bin/java
#fi

# vendor R into the slug
echo "Vendoring R $R_VERSION ($BUILD_PACK_VERSION)" | indent

# download and unpack binaries
echo "Downloading and unpacking R binaries" | indent
mkdir -p $VENDOR_DIR && curl $R_BINARIES -s -o - | tar xzf - -C $VENDOR_DIR

# need to copy the binaries to /app/vendor so that R works
mkdir -p /app/vendor/gcc
cp -R $VENDOR_DIR/gcc/* /app/vendor/gcc

mkdir -p /app/vendor/glibc
cp -R $VENDOR_DIR/glibc/* /app/vendor/glibc

mkdir -p /app/vendor/gsl
cp -R $VENDOR_DIR/gsl/* /app/vendor/gsl

mkdir -p /app/vendor/R
cp -R $VENDOR_DIR/R/* /app/vendor/R

# HACK: need to copy over the gcc libs so that packages can find them
mkdir -p /app/vendor/R/lib64/R/lib
cp /app/vendor/gcc/lib64/* /app/vendor/R/lib64/R/lib

# R needs to know where gfortran and glibc header files are
export PATH="/app/vendor/R/bin:/app/vendor/gcc/bin:$PATH"

export LDFLAGS="-L/app/vendor/gcc/lib64 -L/app/vendor/gsl/lib"
export CPPFLAGS="-I/app/vendor/glibc/string -I/app/vendor/glibc/time -I/app/vendor/gsl/include"
export PKG_LDFLAGS=$LDFLAGS
export PKG_CPPFLAGS=$CPPFLAGS

export R_HOME=$R_BASE/lib64/R
export R_INCLUDE=$R_HOME/include

# copy over environment
mkdir -p $BUILD_DIR/.profile.d
cp "$BUILDPACK_DIR/bin/r_environment.sh" $BUILD_DIR/.profile.d/r_environment.sh

# prevent warnings when building packages
mkdir -p /app/vendor/R/lib64/R/doc/html
touch /app/vendor/R/lib64/R/doc/html/R.css

# install dependencies from CRAN
echo "Executing init.r script" | indent

R CMD javareconf -e
R CMD javareconf

# set the CRAN mirror and run the init.r program
/app/vendor/R/bin/R -s <<RPROG > indent
  Sys.setenv(BUILD_DIR="$BUILD_DIR")
  Sys.setenv(JAVA_HOME="$JAVA_HOME")
  Sys.setenv(JAVA_CPPFLAGS="$JAVA_CPPFLAGS")
  setwd("$BUILD_DIR")
  r <- getOption("repos");
  r["CRAN"] <- "$CRAN_MIRROR";
  options(repos=r);
  `cat $BUILD_DIR/init.r`
RPROG

echo "R $R_VERSION successfully installed" | indent

# need to copy binaries back so that any installed packages are included in the slug
cp -R /app/vendor/R/* $VENDOR_DIR/R